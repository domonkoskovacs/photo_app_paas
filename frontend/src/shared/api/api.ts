/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface PhotoMetadataResponse
 */
export interface PhotoMetadataResponse {
    /**
     * 
     * @type {number}
     * @memberof PhotoMetadataResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PhotoMetadataResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PhotoMetadataResponse
     */
    'uploadDate': string;
}

/**
 * PhotoControllerApi - axios parameter creator
 * @export
 */
export const PhotoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/photo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetAllMetadataSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMetadata: async (sortBy?: GetAllMetadataSortByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/photo/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/photo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} image 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload: async (image: File, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('upload', 'image', image)
            const localVarPath = `/api/photo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhotoControllerApi - functional programming interface
 * @export
 */
export const PhotoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhotoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotoControllerApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetAllMetadataSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMetadata(sortBy?: GetAllMetadataSortByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PhotoMetadataResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMetadata(sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotoControllerApi.getAllMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotoControllerApi.getById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} image 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upload(image: File, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upload(image, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotoControllerApi.upload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PhotoControllerApi - factory interface
 * @export
 */
export const PhotoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhotoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {PhotoControllerApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: PhotoControllerApiDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoControllerApiGetAllMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMetadata(requestParameters: PhotoControllerApiGetAllMetadataRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<PhotoMetadataResponse>> {
            return localVarFp.getAllMetadata(requestParameters.sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoControllerApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: PhotoControllerApiGetByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoControllerApiUploadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(requestParameters: PhotoControllerApiUploadRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.upload(requestParameters.image, requestParameters.name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in PhotoControllerApi.
 * @export
 * @interface PhotoControllerApiDeleteRequest
 */
export interface PhotoControllerApiDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoControllerApiDelete
     */
    readonly id: number
}

/**
 * Request parameters for getAllMetadata operation in PhotoControllerApi.
 * @export
 * @interface PhotoControllerApiGetAllMetadataRequest
 */
export interface PhotoControllerApiGetAllMetadataRequest {
    /**
     * 
     * @type {'NAME_ASC' | 'NAME_DESC' | 'DATE_ASC' | 'DATE_DESC'}
     * @memberof PhotoControllerApiGetAllMetadata
     */
    readonly sortBy?: GetAllMetadataSortByEnum
}

/**
 * Request parameters for getById operation in PhotoControllerApi.
 * @export
 * @interface PhotoControllerApiGetByIdRequest
 */
export interface PhotoControllerApiGetByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoControllerApiGetById
     */
    readonly id: number
}

/**
 * Request parameters for upload operation in PhotoControllerApi.
 * @export
 * @interface PhotoControllerApiUploadRequest
 */
export interface PhotoControllerApiUploadRequest {
    /**
     * 
     * @type {File}
     * @memberof PhotoControllerApiUpload
     */
    readonly image: File

    /**
     * 
     * @type {string}
     * @memberof PhotoControllerApiUpload
     */
    readonly name?: string
}

/**
 * PhotoControllerApi - object-oriented interface
 * @export
 * @class PhotoControllerApi
 * @extends {BaseAPI}
 */
export class PhotoControllerApi extends BaseAPI {
    /**
     * 
     * @param {PhotoControllerApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoControllerApi
     */
    public _delete(requestParameters: PhotoControllerApiDeleteRequest, options?: RawAxiosRequestConfig) {
        return PhotoControllerApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoControllerApiGetAllMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoControllerApi
     */
    public getAllMetadata(requestParameters: PhotoControllerApiGetAllMetadataRequest = {}, options?: RawAxiosRequestConfig) {
        return PhotoControllerApiFp(this.configuration).getAllMetadata(requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoControllerApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoControllerApi
     */
    public getById(requestParameters: PhotoControllerApiGetByIdRequest, options?: RawAxiosRequestConfig) {
        return PhotoControllerApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoControllerApiUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoControllerApi
     */
    public upload(requestParameters: PhotoControllerApiUploadRequest, options?: RawAxiosRequestConfig) {
        return PhotoControllerApiFp(this.configuration).upload(requestParameters.image, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAllMetadataSortByEnum = {
    NameAsc: 'NAME_ASC',
    NameDesc: 'NAME_DESC',
    DateAsc: 'DATE_ASC',
    DateDesc: 'DATE_DESC'
} as const;
export type GetAllMetadataSortByEnum = typeof GetAllMetadataSortByEnum[keyof typeof GetAllMetadataSortByEnum];


